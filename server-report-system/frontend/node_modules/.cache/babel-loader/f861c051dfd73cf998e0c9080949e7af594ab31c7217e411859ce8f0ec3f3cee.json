{"ast":null,"code":"import io from 'socket.io-client';\nimport toast from 'react-hot-toast';\nclass NotificationService {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.callbacks = new Map();\n  }\n\n  // Initialize socket connection\n  connect(user) {\n    if (this.socket) {\n      this.disconnect();\n    }\n    this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\n      withCredentials: true,\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to notification service');\n      this.connected = true;\n\n      // Join role-based room\n      if (user !== null && user !== void 0 && user.role) {\n        this.socket.emit('join_role_room', user.role);\n      }\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from notification service');\n      this.connected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      this.connected = false;\n    });\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  // Disconnect socket\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.connected = false;\n    }\n  }\n\n  // Set up event listeners for different notification types\n  setupEventListeners() {\n    if (!this.socket) return;\n\n    // New report notifications\n    this.socket.on('new_report', data => {\n      this.handleNewReport(data);\n      this.triggerCallback('new_report', data);\n    });\n\n    // Report status updates\n    this.socket.on('report_status_update', data => {\n      this.handleReportStatusUpdate(data);\n      this.triggerCallback('report_status_update', data);\n    });\n\n    // Report assignments\n    this.socket.on('report_assigned', data => {\n      this.handleReportAssigned(data);\n      this.triggerCallback('report_assigned', data);\n    });\n\n    // Stale report alerts\n    this.socket.on('stale_report', data => {\n      this.handleStaleReport(data);\n      this.triggerCallback('stale_report', data);\n    });\n\n    // Weekly reports\n    this.socket.on('weekly_report', data => {\n      this.handleWeeklyReport(data);\n      this.triggerCallback('weekly_report', data);\n    });\n\n    // Monthly reports\n    this.socket.on('monthly_report', data => {\n      this.handleMonthlyReport(data);\n      this.triggerCallback('monthly_report', data);\n    });\n\n    // High priority report alerts\n    this.socket.on('high_priority_alert', data => {\n      this.handleHighPriorityAlert(data);\n      this.triggerCallback('high_priority_alert', data);\n    });\n\n    // General system notifications\n    this.socket.on('system_notification', data => {\n      this.handleSystemNotification(data);\n      this.triggerCallback('system_notification', data);\n    });\n  }\n\n  // Handle new report notification\n  handleNewReport(data) {\n    const {\n      report,\n      reportType\n    } = data;\n    const priorityIcon = report.priority === 'high' ? '🚨' : report.priority === 'medium' ? '⚠️' : 'ℹ️';\n    toast.success(`${priorityIcon} New ${reportType} report #${report.id}`, {\n      duration: 5000,\n      position: 'top-right'\n    });\n\n    // Play notification sound for high priority\n    if (report.priority === 'high') {\n      this.playNotificationSound();\n    }\n  }\n\n  // Handle report status update notification\n  handleReportStatusUpdate(data) {\n    const {\n      reportId,\n      oldStatus,\n      newStatus,\n      handledBy\n    } = data;\n    const statusIcon = newStatus === 'resolved' ? '✅' : newStatus === 'rejected' ? '❌' : newStatus === 'in_progress' ? '🔄' : '📋';\n    toast.info(`${statusIcon} Report #${reportId} status changed to ${newStatus}`, {\n      duration: 4000,\n      position: 'top-right'\n    });\n  }\n\n  // Handle report assignment notification\n  handleReportAssigned(data) {\n    const {\n      reportId,\n      assignedTo,\n      assignedBy\n    } = data;\n    toast.info(`📋 Report #${reportId} assigned to ${assignedTo}`, {\n      duration: 4000,\n      position: 'top-right'\n    });\n  }\n\n  // Handle stale report alert\n  handleStaleReport(data) {\n    const {\n      reportId,\n      age\n    } = data;\n    const hours = Math.floor(age / (1000 * 60 * 60));\n    toast.error(`⏰ Report #${reportId} has been pending for ${hours} hours`, {\n      duration: 8000,\n      position: 'top-right'\n    });\n    this.playNotificationSound();\n  }\n\n  // Handle weekly report notification\n  handleWeeklyReport(data) {\n    toast.success('📊 Weekly report generated and available for review', {\n      duration: 6000,\n      position: 'top-right'\n    });\n  }\n\n  // Handle monthly report notification\n  handleMonthlyReport(data) {\n    toast.success('📈 Monthly report generated and available for review', {\n      duration: 6000,\n      position: 'top-right'\n    });\n  }\n\n  // Handle high priority alert\n  handleHighPriorityAlert(data) {\n    const {\n      reportId,\n      message\n    } = data;\n    toast.error(`🚨 HIGH PRIORITY: Report #${reportId} - ${message}`, {\n      duration: 10000,\n      position: 'top-center'\n    });\n    this.playNotificationSound();\n  }\n\n  // Handle system notification\n  handleSystemNotification(data) {\n    const {\n      type,\n      message,\n      level = 'info'\n    } = data;\n    const toastFunction = level === 'error' ? toast.error : level === 'warning' ? toast.error : level === 'success' ? toast.success : toast.info;\n    toastFunction(message, {\n      duration: 5000,\n      position: 'top-right'\n    });\n  }\n\n  // Register callback for specific event\n  on(event, callback) {\n    if (!this.callbacks.has(event)) {\n      this.callbacks.set(event, new Set());\n    }\n    this.callbacks.get(event).add(callback);\n  }\n\n  // Unregister callback\n  off(event, callback) {\n    if (this.callbacks.has(event)) {\n      this.callbacks.get(event).delete(callback);\n    }\n  }\n\n  // Trigger registered callbacks\n  triggerCallback(event, data) {\n    if (this.callbacks.has(event)) {\n      this.callbacks.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Notification callback error:', error);\n        }\n      });\n    }\n  }\n\n  // Play notification sound\n  playNotificationSound() {\n    try {\n      // Create and play audio notification\n      const audio = new Audio('/notification.mp3');\n      audio.volume = 0.3;\n      audio.play().catch(error => {\n        console.log('Could not play notification sound:', error);\n      });\n    } catch (error) {\n      console.log('Notification sound not available:', error);\n    }\n  }\n\n  // Request notification permission\n  async requestNotificationPermission() {\n    if ('Notification' in window) {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return false;\n  }\n\n  // Show browser notification\n  showBrowserNotification(title, options = {}) {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const notification = new Notification(title, {\n        icon: '/logo192.png',\n        badge: '/logo192.png',\n        tag: 'ahrp-report',\n        renotify: true,\n        requireInteraction: false,\n        ...options\n      });\n\n      // Auto close after 5 seconds\n      setTimeout(() => {\n        notification.close();\n      }, 5000);\n      return notification;\n    }\n    return null;\n  }\n\n  // Get connection status\n  isConnected() {\n    return this.connected;\n  }\n\n  // Emit custom event\n  emit(event, data) {\n    if (this.socket && this.connected) {\n      this.socket.emit(event, data);\n    }\n  }\n}\n\n// Create singleton instance\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["io","toast","NotificationService","constructor","socket","connected","callbacks","Map","connect","user","disconnect","process","env","REACT_APP_API_URL","withCredentials","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","role","emit","error","setupEventListeners","data","handleNewReport","triggerCallback","handleReportStatusUpdate","handleReportAssigned","handleStaleReport","handleWeeklyReport","handleMonthlyReport","handleHighPriorityAlert","handleSystemNotification","report","reportType","priorityIcon","priority","success","id","duration","position","playNotificationSound","reportId","oldStatus","newStatus","handledBy","statusIcon","info","assignedTo","assignedBy","age","hours","Math","floor","message","type","level","toastFunction","event","callback","has","set","Set","get","add","off","delete","forEach","audio","Audio","volume","play","catch","requestNotificationPermission","window","permission","Notification","requestPermission","showBrowserNotification","title","options","notification","icon","badge","tag","renotify","requireInteraction","setTimeout","close","isConnected","notificationService"],"sources":["C:/Users/anton/OneDrive/Desktop/ahrpo scripts/logging_website/server-report-system/frontend/src/services/notifications.js"],"sourcesContent":["import io from 'socket.io-client';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.connected = false;\r\n    this.callbacks = new Map();\r\n  }\r\n\r\n  // Initialize socket connection\r\n  connect(user) {\r\n    if (this.socket) {\r\n      this.disconnect();\r\n    }\r\n\r\n    this.socket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\r\n      withCredentials: true,\r\n      autoConnect: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to notification service');\r\n      this.connected = true;\r\n      \r\n      // Join role-based room\r\n      if (user?.role) {\r\n        this.socket.emit('join_role_room', user.role);\r\n      }\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('Disconnected from notification service');\r\n      this.connected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Socket connection error:', error);\r\n      this.connected = false;\r\n    });\r\n\r\n    // Set up event listeners\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  // Disconnect socket\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.connected = false;\r\n    }\r\n  }\r\n\r\n  // Set up event listeners for different notification types\r\n  setupEventListeners() {\r\n    if (!this.socket) return;\r\n\r\n    // New report notifications\r\n    this.socket.on('new_report', (data) => {\r\n      this.handleNewReport(data);\r\n      this.triggerCallback('new_report', data);\r\n    });\r\n\r\n    // Report status updates\r\n    this.socket.on('report_status_update', (data) => {\r\n      this.handleReportStatusUpdate(data);\r\n      this.triggerCallback('report_status_update', data);\r\n    });\r\n\r\n    // Report assignments\r\n    this.socket.on('report_assigned', (data) => {\r\n      this.handleReportAssigned(data);\r\n      this.triggerCallback('report_assigned', data);\r\n    });\r\n\r\n    // Stale report alerts\r\n    this.socket.on('stale_report', (data) => {\r\n      this.handleStaleReport(data);\r\n      this.triggerCallback('stale_report', data);\r\n    });\r\n\r\n    // Weekly reports\r\n    this.socket.on('weekly_report', (data) => {\r\n      this.handleWeeklyReport(data);\r\n      this.triggerCallback('weekly_report', data);\r\n    });\r\n\r\n    // Monthly reports\r\n    this.socket.on('monthly_report', (data) => {\r\n      this.handleMonthlyReport(data);\r\n      this.triggerCallback('monthly_report', data);\r\n    });\r\n\r\n    // High priority report alerts\r\n    this.socket.on('high_priority_alert', (data) => {\r\n      this.handleHighPriorityAlert(data);\r\n      this.triggerCallback('high_priority_alert', data);\r\n    });\r\n\r\n    // General system notifications\r\n    this.socket.on('system_notification', (data) => {\r\n      this.handleSystemNotification(data);\r\n      this.triggerCallback('system_notification', data);\r\n    });\r\n  }\r\n\r\n  // Handle new report notification\r\n  handleNewReport(data) {\r\n    const { report, reportType } = data;\r\n    const priorityIcon = report.priority === 'high' ? '🚨' : \r\n                        report.priority === 'medium' ? '⚠️' : 'ℹ️';\r\n    \r\n    toast.success(\r\n      `${priorityIcon} New ${reportType} report #${report.id}`,\r\n      {\r\n        duration: 5000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n\r\n    // Play notification sound for high priority\r\n    if (report.priority === 'high') {\r\n      this.playNotificationSound();\r\n    }\r\n  }\r\n\r\n  // Handle report status update notification\r\n  handleReportStatusUpdate(data) {\r\n    const { reportId, oldStatus, newStatus, handledBy } = data;\r\n    const statusIcon = newStatus === 'resolved' ? '✅' : \r\n                      newStatus === 'rejected' ? '❌' : \r\n                      newStatus === 'in_progress' ? '🔄' : '📋';\r\n    \r\n    toast.info(\r\n      `${statusIcon} Report #${reportId} status changed to ${newStatus}`,\r\n      {\r\n        duration: 4000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n  }\r\n\r\n  // Handle report assignment notification\r\n  handleReportAssigned(data) {\r\n    const { reportId, assignedTo, assignedBy } = data;\r\n    \r\n    toast.info(\r\n      `📋 Report #${reportId} assigned to ${assignedTo}`,\r\n      {\r\n        duration: 4000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n  }\r\n\r\n  // Handle stale report alert\r\n  handleStaleReport(data) {\r\n    const { reportId, age } = data;\r\n    const hours = Math.floor(age / (1000 * 60 * 60));\r\n    \r\n    toast.error(\r\n      `⏰ Report #${reportId} has been pending for ${hours} hours`,\r\n      {\r\n        duration: 8000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n\r\n    this.playNotificationSound();\r\n  }\r\n\r\n  // Handle weekly report notification\r\n  handleWeeklyReport(data) {\r\n    toast.success(\r\n      '📊 Weekly report generated and available for review',\r\n      {\r\n        duration: 6000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n  }\r\n\r\n  // Handle monthly report notification\r\n  handleMonthlyReport(data) {\r\n    toast.success(\r\n      '📈 Monthly report generated and available for review',\r\n      {\r\n        duration: 6000,\r\n        position: 'top-right',\r\n      }\r\n    );\r\n  }\r\n\r\n  // Handle high priority alert\r\n  handleHighPriorityAlert(data) {\r\n    const { reportId, message } = data;\r\n    \r\n    toast.error(\r\n      `🚨 HIGH PRIORITY: Report #${reportId} - ${message}`,\r\n      {\r\n        duration: 10000,\r\n        position: 'top-center',\r\n      }\r\n    );\r\n\r\n    this.playNotificationSound();\r\n  }\r\n\r\n  // Handle system notification\r\n  handleSystemNotification(data) {\r\n    const { type, message, level = 'info' } = data;\r\n    \r\n    const toastFunction = level === 'error' ? toast.error :\r\n                         level === 'warning' ? toast.error :\r\n                         level === 'success' ? toast.success :\r\n                         toast.info;\r\n    \r\n    toastFunction(message, {\r\n      duration: 5000,\r\n      position: 'top-right',\r\n    });\r\n  }\r\n\r\n  // Register callback for specific event\r\n  on(event, callback) {\r\n    if (!this.callbacks.has(event)) {\r\n      this.callbacks.set(event, new Set());\r\n    }\r\n    this.callbacks.get(event).add(callback);\r\n  }\r\n\r\n  // Unregister callback\r\n  off(event, callback) {\r\n    if (this.callbacks.has(event)) {\r\n      this.callbacks.get(event).delete(callback);\r\n    }\r\n  }\r\n\r\n  // Trigger registered callbacks\r\n  triggerCallback(event, data) {\r\n    if (this.callbacks.has(event)) {\r\n      this.callbacks.get(event).forEach(callback => {\r\n        try {\r\n          callback(data);\r\n        } catch (error) {\r\n          console.error('Notification callback error:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Play notification sound\r\n  playNotificationSound() {\r\n    try {\r\n      // Create and play audio notification\r\n      const audio = new Audio('/notification.mp3');\r\n      audio.volume = 0.3;\r\n      audio.play().catch(error => {\r\n        console.log('Could not play notification sound:', error);\r\n      });\r\n    } catch (error) {\r\n      console.log('Notification sound not available:', error);\r\n    }\r\n  }\r\n\r\n  // Request notification permission\r\n  async requestNotificationPermission() {\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      return permission === 'granted';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Show browser notification\r\n  showBrowserNotification(title, options = {}) {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const notification = new Notification(title, {\r\n        icon: '/logo192.png',\r\n        badge: '/logo192.png',\r\n        tag: 'ahrp-report',\r\n        renotify: true,\r\n        requireInteraction: false,\r\n        ...options\r\n      });\r\n\r\n      // Auto close after 5 seconds\r\n      setTimeout(() => {\r\n        notification.close();\r\n      }, 5000);\r\n\r\n      return notification;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Get connection status\r\n  isConnected() {\r\n    return this.connected;\r\n  }\r\n\r\n  // Emit custom event\r\n  emit(event, data) {\r\n    if (this.socket && this.connected) {\r\n      this.socket.emit(event, data);\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst notificationService = new NotificationService();\r\n\r\nexport default notificationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}